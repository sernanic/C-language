Homework #5 - COP2220

Write a program in the provided HW5.c file that performs the following requirements:

You are to write 3 functions along with the corresponding function prototypes.
The function prototypes will be placed at the top of the file, where indicated by the
comments. The function definitions will be placed towards the bottom of the file where
indicated. For help with writing functions see the function-practice.c example posted on Canvas.
The definition of the functions are as follows:

1) The toSmall function will return a char type. This function has one input parameter
of char type. The function will check to see if the input char is a capital letter from A to Z.
If the input is a capital letter, then the function will convert the input to a small letter
and return that value. If the input is not a capital letter, then it will return the character
unchanged.

2) The absValue function will return a double type. This function has one input parameter
of double type. This function will return the absolute value of the input parameter.

3) The printLine function will return a void type. This function has three input parameters.
The first input parameter is a char type. The second input parameter is a char type. 
The third input parameter is an int type. The function will print out a line to the display.
The line is constructed as follows. The first and last characters displayed are the first
input parameter. The character that is displayed between the first and last characters is
the second input parameter. The number of characters displayed between the first and last
characters is determined by the third input paramter. At the end of the displayed line at
newline character (\n) should be displayed. An example:
1st input paramter 'A'
2nd input paramter 'B'
3rd input paramter 10

The displayed output should be:
ABBBBBBBBBBA
Note the the displayed line has a total of 12 characters (10 B's and 2 A's).

Extra Credit) The displayRect function will return a void type. This function has two input parameters.
The first input parameter is an int type. The second input parameter is an int type.
The first input parameter represents the width of a rectangle. The second input parameter represents the 
height of a rectangle. The function should display a rectangle of the width and height specified in
the input parameters. The input parameters are in units of number of characters. To implement this function
you should use the printLine function.


In your main statement you are required to test your 3 (or 4) functions

Section 1 test) Demonstrate the toSmall function in three different ways.
1) using a capital letter input.
2) using a small letter input.
3) using a digit input.
Display your results.

Section 2 test) Demonstrate the absValue function in two different ways.
1) using a negaitve number as the input.
2) using a positive number as the input.

Section 3 test) Demonstrate the printLine function in 2 different ways.
1) The using the input parameters of ' ', '-', 10
2) The using the input parameters of '|', ' ', 10  (note the ' ' is the space character)

Extra Credit test) Demonstrate the displayRect function in 1 ways
1) using the input parameters of 12 (width) and 7 (height)


An image file is provided that gives you an example of what the test output should look like.


Files provided:
The file HW5.c is provided and must be used as a starting point for your program.

Files submitted to Canvas:
Your completed HW5.c program.
The image your program running all the tests specified.

Your program must match the above listed requirements.
Your program must compile with no errors or warnings for full credit.
Your program must run and execute the above listed requirements.
Your program must follow the Best Practices covered in class for full credit.
Your program must be adequately commented for full credit.
Your program must be tested for full credit.
You  must submit an image of your program working for full credit.
The program must be submitted on time in order to receive any credit.
Late submissions will not be accepted or graded.
All programming assignments are individual work, sharing code is considered cheating.

